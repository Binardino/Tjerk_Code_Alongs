Tjerks-MBP:examples tjerk$ python3
Python 3.7.5 (default, Nov  1 2019, 02:16:32) 
[Clang 11.0.0 (clang-1100.0.33.8)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> help
Type help() for interactive help, or help(object) for help about object.
>>> help()

Welcome to Python 3.7's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at https://docs.python.org/3.7/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> print

help> :

help> quit

You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.
>>> my_list = [0,1,2,3,4,5,6]
>>> print(my_list[::2]
... )
[0, 2, 4, 6]
>>> my_stringlist = ['a','b','c','d','e','f']
>>> my_stringlist[::2]
['a', 'c', 'e']
>>> help
Type help() for interactive help, or help(object) for help about object.
>>> help()

Welcome to Python 3.7's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at https://docs.python.org/3.7/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> list

help> pop
No Python documentation found for 'pop'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> list.pop

help> list.pop

help> quit

You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.
>>> my_list = list(range(20))
>>> my_list
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
>>> popped_elem = my_list.pop()
>>> print(popped_elem)
19
>>> print(my_list)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
>>> popped_elem2 = my_list.pop(4)
>>> print(popped_elem2)
4
>>> print(my_list)
[0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
>>> help
Type help() for interactive help, or help(object) for help about object.
>>> help(list.pop)

>>> help()

Welcome to Python 3.7's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at https://docs.python.org/3.7/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> dict

help> dictionary
No Python documentation found for 'dictionary'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> dictionar
No Python documentation found for 'dictionar'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> dictionaries
No Python documentation found for 'dictionaries'.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.

help> dict

help> +

help> quit

You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.
>>> my_tuple = (1,4,2,'abc',8,9,[4,8,9])
>>> print(my_tuple)
(1, 4, 2, 'abc', 8, 9, [4, 8, 9])
>>> my_tuple = 1,4,2,'abc',8,9,[4,8,9]
>>> print(my_tuple)
(1, 4, 2, 'abc', 8, 9, [4, 8, 9])
>>> coordination_pair = 3,9
>>> print(coordination_pair)
(3, 9)
>>> coordination_pair[0]
3
>>> coordination_pair[1]
9
>>> x = coordination_pair[0]
>>> y = coordination_pair[1]
>>> print(x)
3
>>> print(y)
9
>>> x, y = coordination_pair
>>> print(x)
3
>>> print(y)
9
>>> names = ('Anna','Zak')
>>> name1, name2 = names
>>> print(name1)
Anna
>>> print(name2)
Zak
>>> a, b = [8, 9]
>>> a
8
>>> b
9
>>> a, b = [8, 9, 11]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: too many values to unpack (expected 2)
>>> a, b, c_ = [8, 9, 11]
>>> a, b, c_, d = [8, 9, 11]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not enough values to unpack (expected 4, got 3)
>>> a, b, c_, d = [8, 8, 8]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not enough values to unpack (expected 4, got 3)
>>> a, b, c = [8, 8, 8]
>>> a
8
>>> b
8
>>> c
8
>>> my_tuple = 1,4,2,'abc',8,9,[4,8,9],8.087
>>> my_tuple = (1,4,2,'abc',8,9,[4,8,9],8.087)
>>> my_tuple[6]
[4, 8, 9]
>>> my_tuple[6][1]
8
>>> my_tuple[0] = 100
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> my_tuple1 = (1,9,7)
>>> my_tuple2 = (3,7,2)
>>> my_tuple1 + my_tuple2
(1, 9, 7, 3, 7, 2)
>>> my_tuple3 = my_tuple1 + my_tuple2
>>> my_tuple1 = my_tuple1 + my_tuple2
>>> my_tuple1 = 'now a string'
>>> a, b = [8, 9]
>>> my_tuple4 = (9)
>>> type(my_tuple4)
<class 'int'>
>>> my_tuple4 = 9, 8 , 9, 'abc'
>>> print(my_tuple4)
(9, 8, 9, 'abc')
>>> my_tuple4 = (9)
>>> my_tuple4 = 9
>>> type(my_tuple4)
<class 'int'>
>>> my_tuple4 = (9,)
>>> print(my_tuple4)
(9,)
>>> type(my_tuple4)
<class 'tuple'>
>>> len(my_tuple4)
1
>>> a, b_ = (1,9)
>>> a
1
>>> b_
9
>>> a, b_thiswillneverbeusedsodontlookatitanywayandhowisyourdaybtw = (1,9)
>>> a
1
>>> b_
b_
b_thiswillneverbeusedsodontlookatitanywayandhowisyourdaybtw
>>> b_
9
>>> b_thiswillneverbeusedsodontlookatitanywayandhowisyourdaybtw
9
>>> my_tuple4 = (9, 8, 1, 'abc')
>>> for elem in my_tuple4:
...     if elem == 'abc':
...             print 'yes i found the tuple'
  File "<stdin>", line 3
    print 'yes i found the tuple'
                                ^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print('yes i found the tuple')?
>>> for elem in my_tuple4:
...     if elem == 'abc':
...             print('yes i found the tuple')
... 
yes i found the tuple
>>> 'abc' in my_tuple4
True
>>> 'abc' not in my_tuple4
False
>>> 'Anna' not in ('Oriol', 'Yago')
True
>>> 'a' in ('a','b','c') and 'a' in ('b','c')
False
>>> 'a' in ('a','b','c') and 'a' in ('b','c','a')
True
>>> quit
Use quit() or Ctrl-D (i.e. EOF) to exit
>>> quit()
Tjerks-MBP:examples tjerk$ vi
Tjerks-MBP:examples tjerk$ python3
Python 3.7.5 (default, Nov  1 2019, 02:16:32) 
[Clang 11.0.0 (clang-1100.0.33.8)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> names = ('Anna Riera', 'Kevin Forster', 'Lorenzo Fabritius', 'Miguel Granica', 'Minerva Liste', 'Octavi Fernandez', 'Oriol Cunill', 'Rebecca Estiarte', 'Robin Langlois', 'Yago Mougán', 'Yazan Masarweh', 'Zak Abou Merieme')
>>> names
('Anna Riera', 'Kevin Forster', 'Lorenzo Fabritius', 'Miguel Granica', 'Minerva Liste', 'Octavi Fernandez', 'Oriol Cunill', 'Rebecca Estiarte', 'Robin Langlois', 'Yago Mougán', 'Yazan Masarweh', 'Zak Abou Merieme')
>>> 'Anna Riera' in names
True
>>> for name in names:
...     print('Hi ' + name.upper() * 2 + ' !!!')
... 
Hi ANNA RIERAANNA RIERA !!!
Hi KEVIN FORSTERKEVIN FORSTER !!!
Hi LORENZO FABRITIUSLORENZO FABRITIUS !!!
Hi MIGUEL GRANICAMIGUEL GRANICA !!!
Hi MINERVA LISTEMINERVA LISTE !!!
Hi OCTAVI FERNANDEZOCTAVI FERNANDEZ !!!
Hi ORIOL CUNILLORIOL CUNILL !!!
Hi REBECCA ESTIARTEREBECCA ESTIARTE !!!
Hi ROBIN LANGLOISROBIN LANGLOIS !!!
Hi YAGO MOUGÁNYAGO MOUGÁN !!!
Hi YAZAN MASARWEHYAZAN MASARWEH !!!
Hi ZAK ABOU MERIEMEZAK ABOU MERIEME !!!
>>> t = (1,2,3,'abc')
>>> [elem+2 for elem in t]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <listcomp>
TypeError: can only concatenate str (not "int") to str
>>> list1 = [0,2,8]
>>> [elem+2 for elem in list1]
[2, 4, 10]
>>> elem+2 for elem in list1
  File "<stdin>", line 1
    elem+2 for elem in list1
             ^
SyntaxError: invalid syntax
>>> [elem+2 for elem in list1]
[2, 4, 10]
>>> [elem*2 for elem in list1]
[0, 4, 16]
>>> tuple1 = (1,2,3,'abc')
>>> [elem*2 for elem in tuple1]
[2, 4, 6, 'abcabc']
>>> list1 = [0,2,8,'string in it']
>>> [elem*2 for elem in tuple1]
[2, 4, 6, 'abcabc']
>>> [elem+2 for elem in list1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <listcomp>
TypeError: can only concatenate str (not "int") to str
>>> 
>>> person = {'name':'Robin', 'age':32.2, 'hobby':'guitar', height:170}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'height' is not defined
>>> person = {'name':'Robin', 'age':32.2, 'hobby':'guitar', 'height':170}
>>> person
{'name': 'Robin', 'age': 32.2, 'hobby': 'guitar', 'height': 170}
>>> person.values()
dict_values(['Robin', 32.2, 'guitar', 170])
>>> for elem in person.values():
...     the_type = type(elem)
...     print(the_type)
... 
<class 'str'>
<class 'float'>
<class 'str'>
<class 'int'>
>>> my_dict = {'python':'python is a programming language invinted by an awesome Dutch guy'}
>>> my_dict['python']
'python is a programming language invinted by an awesome Dutch guy'
>>> person = {'name':'Robin', 'age':32.2, 'hobby':'guitar', 'height':170}
>>> person.keys()
dict_keys(['name', 'age', 'hobby', 'height'])
>>> person.values()
dict_values(['Robin', 32.2, 'guitar', 170])
>>> for key in person.keys():
...     print(key.upper())
... 
NAME
AGE
HOBBY
HEIGHT
>>> for val in person.values():
...     print(val * 2)
... 
RobinRobin
64.4
guitarguitar
340
>>> for val in person.values():
...     if val > 5:
...             print('Yazan')
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: '>' not supported between instances of 'str' and 'int'
>>> for val in person.values():
...     print(type(val))
... 
<class 'str'>
<class 'float'>
<class 'str'>
<class 'int'>
>>> 'this is a string' > 5
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: '>' not supported between instances of 'str' and 'int'
>>> 8 > 5
True
>>> person.items()
dict_items([('name', 'Robin'), ('age', 32.2), ('hobby', 'guitar'), ('height', 170)])
>>> for (key,val) in person.items():
...     print('the key is ' + key)
...     print('the value is ' + val)
... 
the key is name
the value is Robin
the key is age
Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
TypeError: can only concatenate str (not "float") to str
>>>     print('the value is ' + str(val))
  File "<stdin>", line 1
    print('the value is ' + str(val))
    ^
IndentationError: unexpected indent
>>> for (key,val) in person.items():
...     print('the key is ' + key)
...     print('the value is ')
...     print(val)
... 
the key is name
the value is 
Robin
the key is age
the value is 
32.2
the key is hobby
the value is 
guitar
the key is height
the value is 
170
>>> person.items()
dict_items([('name', 'Robin'), ('age', 32.2), ('hobby', 'guitar'), ('height', 170)])
>>> person.items()[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'dict_items' object is not subscriptable
>>> person.items()(0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'dict_items' object is not callable
>>> person.items()
>>> person.items()
dict_items([('name', 'Robin'), ('age', 32.2), ('hobby', 'guitar'), ('height', 170)])
>>> person = {'name':'Robin', 'age':32.2, 'hobby':'guitar', 'height':170}
>>> person2 = {'name':'Rebecca', 'age':'26', 'hobby':'volleyball', 'height':'165'}
>>> person2
{'name': 'Rebecca', 'age': '26', 'hobby': 'volleyball', 'height': '165'}
>>> person2 = {'name':'Rebecca', 'age':26, 'hobby':'volleyball', 'height':165}
>>> person1 = person
>>> person1
{'name': 'Robin', 'age': 32.2, 'hobby': 'guitar', 'height': 170}
>>> person2
{'name': 'Rebecca', 'age': 26, 'hobby': 'volleyball', 'height': 165}
>>> person1.height
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'dict' object has no attribute 'height'
>>> person1(height)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'height' is not defined
>>> person1[height]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'height' is not defined
>>> person1['height']
170
>>> 









>>> person2 = {'name':'Rebecca', 'age':26, 'hobby':'volleyball', 'height':165}
>>> person1 = {'name':'Robin', 'age':32.2, 'hobby':'guitar', 'height':170}
>>> person1.keys()
dict_keys(['name', 'age', 'hobby', 'height'])
>>> person1['name']
'Robin'
>>> person1['age']
32.2
>>> person1['height']
170
>>> print('the height of ', person1['name'], ' is ', person1['height'])
the height of  Robin  is  170
>>> print('the height of {0} is {1}'.format(person1['name'], person1['height']))
the height of Robin is 170
>>> person1['height'] > person2['height']
True
>>> if person1['height'] > person2['height']:
...     print(person1['name'], ' is taller than ' , person2['name'])
... 
Robin  is taller than  Rebecca
>>> person2['age'] = 27
>>> print(person2)
{'name': 'Rebecca', 'age': 27, 'hobby': 'volleyball', 'height': 165}
>>> person2['hobby'] = 27
>>> person2['hobby'] = 27
>>> person2['hobby'] = 'cooking'
>>> print(person2)
{'name': 'Rebecca', 'age': 27, 'hobby': 'cooking', 'height': 165}
>>> person2['hometown'] = 'Pescara in Italie'
>>> person2
{'name': 'Rebecca', 'age': 27, 'hobby': 'cooking', 'height': 165, 'hometown': 'Pescara in Italie'}
>>> print(person2['hometown'])
Pescara in Italie
>>> person3 = {'hometown':'Pescara in Italie', 'name':'Uri','realname':'oriol'}
>>> person3
{'hometown': 'Pescara in Italie', 'name': 'Uri', 'realname': 'oriol'}
>>> person3['hometown'] == person2['hometown']
True
>>> squares = {1:1, 2:4, 3:9, 4:16, 5:25}
>>> squares[3]
9
>>> squares[4]
16
>>> print(squares.pop())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: pop expected at least 1 arguments, got 0
>>> print(squares.pop(4))
16
>>> person3.pop('name')
'Uri'
>>> person3['name']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'name'
>>> person3
{'hometown': 'Pescara in Italie', 'realname': 'oriol'}
>>> person3['realname']
'oriol'
>>> person3
{'hometown': 'Pescara in Italie', 'realname': 'oriol'}
>>> person3.pop('realname')
'oriol'
>>> person3
{'hometown': 'Pescara in Italie'}
>>> person1
{'name': 'Robin', 'age': 32.2, 'hobby': 'guitar', 'height': 170}
>>> person1.popitem()
('height', 170)
>>> person1
{'name': 'Robin', 'age': 32.2, 'hobby': 'guitar'}
>>> del person1['name']
>>> person1
{'age': 32.2, 'hobby': 'guitar'}
>>> person1.clear()
>>> person1
{}
>>> person1 = {'name':'Robin', 'age':32.2, 'hobby':'guitar', 'height':170}
>>> squares = {1:1, 2:4, 3:9, 4:16, 5:25}
>>> squares = {1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64}
>>> for elem in range(30):
...     
... 
  File "<stdin>", line 3
    
    ^
IndentationError: expected an indented block
>>> annas_squares_30 = {}
>>> for elem in range(30):
...     annas_squared_30[elem] = elem ** 2
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: name 'annas_squared_30' is not defined
>>> annas_squared_30 = {}
>>> for elem in range(30):
...     annas_squared_30[elem] = elem ** 2
... 
>>> print(annas_squared_30)
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225, 16: 256, 17: 289, 18: 324, 19: 361, 20: 400, 21: 441, 22: 484, 23: 529, 24: 576, 25: 625, 26: 676, 27: 729, 28: 784, 29: 841}
>>> uris_comprehended_dict = {i:i**2 for i in range(30)}
>>> print(uris_comprehended_dict)
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225, 16: 256, 17: 289, 18: 324, 19: 361, 20: 400, 21: 441, 22: 484, 23: 529, 24: 576, 25: 625, 26: 676, 27: 729, 28: 784, 29: 841}
>>> uris_comprehended_list = [i:i**2 for i in range(30)]
  File "<stdin>", line 1
    uris_comprehended_list = [i:i**2 for i in range(30)]
                               ^
SyntaxError: invalid syntax
>>> uris_comprehended_list = [i**2 for i in range(30)]
>>> print(uris_comprehended_list)
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841]
>>> uris_comprehended_list[4]
16
>>> uris_comprehended_list[9]
81
>>> marks = {}.fromkeys(['Math', 'English', 'Science'], 10)
>>> print(marks)
{'Math': 10, 'English': 10, 'Science': 10}
>>> marks = {}.fromkeys(['Math', 'English', 'Science'], 0)
>>> print(marks)
{'Math': 0, 'English': 0, 'Science': 0}
>>> marks['Math'] = 3
>>> marks
{'Math': 3, 'English': 0, 'Science': 0}
>>> marks = {'Math':8, 'English':9, 'Science':7}
>>> marks
{'Math': 8, 'English': 9, 'Science': 7}
>>> marks = {'Math':0, 'English':0, 'Science':0}
>>> marks = {}.fromkeys(['Math', 'English', 'Science', 'Programming'], 0)
>>> marks
{'Math': 0, 'English': 0, 'Science': 0, 'Programming': 0}
>>> marks.keys()
dict_keys(['Math', 'English', 'Science', 'Programming'])
>>> marks.values()
dict_values([0, 0, 0, 0])
>>> marks = {'Math':3, 'English':4, 'Science':7}
>>> for elem in marks:
...     marks['Math'] = 0
... 
>>> print(marks)
{'Math': 0, 'English': 4, 'Science': 7}
>>> for elem in marks:
...     marks[elem] = 0
... 
>>> print(marks)
{'Math': 0, 'English': 0, 'Science': 0}
>>> mark.keys()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'mark' is not defined
>>> marks.keys()
dict_keys(['Math', 'English', 'Science'])
>>> marks['Mathematics'] = marks.pop('Math')
>>> print(marks)
{'English': 0, 'Science': 0, 'Mathematics': 0}
>>> marks = {'Math':3, 'English':4, 'Science':7}
>>> marks['Mathematics'] = marks['Math']
>>> del marks['Math']
>>> print(marks)
{'English': 4, 'Science': 7, 'Mathematics': 3}
>>> help
Type help() for interactive help, or help(object) for help about object.
>>> help()

Welcome to Python 3.7's help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at https://docs.python.org/3.7/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".

help> dict.update

help> quit

You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.
>>> marks = {'Math':3, 'English':4, 'Science':7}
>>> marks.update()
>>> marks
{'Math': 3, 'English': 4, 'Science': 7}
>>> marks.update('Math':2)
  File "<stdin>", line 1
    marks.update('Math':2)
                       ^
SyntaxError: invalid syntax
>>> marks.update(1,2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: update expected at most 1 arguments, got 2
>>> marks.update(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not iterable
>>> marks
{'Math': 3, 'English': 4, 'Science': 7}
>>> person1 = {'name':'Robin', 'age':32.2, 'hobby':'guitar', 'height':170}
>>> person2 = {'name':'Anna','age':28, 'hobby':'sewing', 'height':165}
>>> person3 = {'name':'Yago','age':28, 'hobby':'fencing', 'height':180} 
>>> person1+person2+person3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'dict' and 'dict'
>>> my_list = [person1, person2, person3]
>>> my_people_list = [person1, person2, person3]
>>> print(my_people_list)
[{'name': 'Robin', 'age': 32.2, 'hobby': 'guitar', 'height': 170}, {'name': 'Anna', 'age': 28, 'hobby': 'sewing', 'height': 165}, {'name': 'Yago', 'age': 28, 'hobby': 'fencing', 'height': 180}]
>>> for person in my_people_list:
...     print(person['name'])
... 
Robin
Anna
Yago
>>> for person in my_people_list:
...     print(person['name'], person['hobby'])
... 
Robin guitar
Anna sewing
Yago fencing
>>> len(my_people_list)
3
>>> 


